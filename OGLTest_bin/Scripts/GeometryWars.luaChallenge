score = 0

playerLives = coroutine.wrap(function()
	player_id = challenge:SpawnShip("GW_Player", 0, Vector:new(200, 0), 0, "KeyboardAI", 1)
	challenge:WaitForDeath(player_id)
	challenge:WaitFor(1)

	challenge:Defeat()
end)

circleOf = function(ship_type, quantity, rings, delay, radius)
	print("Spawning " .. quantity .. " " .. ship_type .. " every " .. delay .. " seconds")
	for i = 1, quantity do
		local angle = i * 360 * rings / quantity
		local ship_data = challenge:GetShipData(player_id)
		local ship_id = challenge:SpawnShip(ship_type, 1, ship_data.position + Vector:new(math.cos(math.rad(angle)), math.sin(math.rad(angle))) * radius, 0, "GW_A.luaAI", 2)
		challenge:SetDeathFunction(ship_id, ScoreTen)
		challenge:WaitFor(delay)
	end
end

ScoreTen = function()
	score=score+10
end

spawnRandom = function(ship_type, quantity, min_radius, max_radius)
	for i = 1, quantity do
		local angle = math.random(0, 360)
		local radius = min_radius + (max_radius - min_radius) * math.random()
		local ship_data = challenge:GetShipData(player_id)
		local ship_id = challenge:SpawnShip(ship_type, 1, ship_data.position + Vector:new(math.cos(math.rad(angle)), math.sin(math.rad(angle))) * radius, 0, "GW_A.luaAI", 2)
		challenge:SetDeathFunction(ship_id, ScoreTen)
	end
end

enemySpawn = coroutine.wrap(function()
	challenge:WaitFor(1)

	spawnRandom("GW_A", 10, 500, 1000)
	challenge:WaitFor(3)
	print(score)
	spawnRandom("GW_B", 20, 500, 1000)
	challenge:WaitFor(6)
	print(score)
	spawnRandom("GW_C", 40, 500, 1000)
	challenge:WaitFor(6)
	print(score)
	spawnRandom("GW_A", 20, 500, 1000)
	challenge:WaitFor(0.5)
	print(score)
	spawnRandom("GW_B", 20, 500, 1000)
	challenge:WaitFor(0.5)
	print(score)
	spawnRandom("GW_C", 20, 500, 1000)
	challenge:WaitFor(9)
	print(score)
	spawnRandom("GW_A", 40, 500, 1000)
	challenge:WaitFor(0.5)
	print(score)
	spawnRandom("GW_B", 40, 500, 1000)
	challenge:WaitFor(0.5)
	print(score)
	spawnRandom("GW_C", 40, 500, 1000)
	challenge:WaitFor(9)
	print(score)
	
	circleOf("GW_B", 50, 1, 0, 500)
	challenge:WaitForAllEnemiesDead(0)
	challenge:WaitFor(1)
	print(score)
	circleOf("GW_A", 10, 1, 0.01, 400)
	challenge:WaitForAllEnemiesDead(0)
	challenge:WaitFor(1)
	print(score)
	circleOf("GW_C", 100, 4, 0.05, 500)
	challenge:WaitForAllEnemiesDead(0)
	challenge:WaitFor(1)	
	print(score)
	circleOf("GW_B", 50, 1, 0, 500)
	circleOf("GW_A", 50, 1, 0, 800)
	challenge:WaitForAllEnemiesDead(0)
	challenge:WaitFor(1)
	print(score)
	challenge:Victory()
end)

while true do
	playerLives()
	enemySpawn()
	coroutine.yield()
end