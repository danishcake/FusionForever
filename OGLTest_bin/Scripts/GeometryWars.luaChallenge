score = 0

playerLives = coroutine.wrap(function()
	player_id = challenge:SpawnShip("GW_Player", 0, Vector:new(200, 0), 0, "KeyboardAI", 1)
	challenge:WaitForDeath(player_id)
	challenge:WaitFor(1)

	challenge:Defeat()
end)

circleOf = function(ship_type, quantity, rings, delay, radius)
	for i = 1, quantity do
		local angle = i * 360 * rings / quantity
		local ship_data = challenge:GetShipData(player_id)
		local ship_id = challenge:SpawnShip(ship_type, 1, ship_data.position + Vector:new(math.cos(math.rad(angle)), math.sin(math.rad(angle))) * radius, 0, "GW_A.luaAI", 2)
		challenge:SetDeathFunction(ship_id, ScoreTen)
		challenge:WaitFor(delay)
	end
end

ScoreTen = function()
	score=score+10
end

spawnRandom = function(ship_type, quantity, min_radius, max_radius)
	for i = 1, quantity do
		local angle = math.random(0, 360)
		local radius = min_radius + (max_radius - min_radius) * math.random()
		local ship_data = challenge:GetShipData(player_id)
		local ship_id = challenge:SpawnShip(ship_type, 1, ship_data.position + Vector:new(math.cos(math.rad(angle)), math.sin(math.rad(angle))) * radius, 0, "GW_A.luaAI", 2)
		challenge:SetDeathFunction(ship_id, ScoreTen)
	end
end

spawnBunch = function(ship_type, quantity, delay, position, max_radius)
	local v3 = Vector:new(0,0)
	local random_pos = Vector:new(0, 0);
	
	for i = 1, quantity do
		local angle = math.random(0, 360)
		local radius = max_radius * math.random()
		local ship_data = challenge:GetShipData(player_id)
		random_pos.x = math.cos(math.rad(angle)) * radius
		random_pos.y = math.sin(math.rad(angle)) * radius

		Vector:add(ship_data.position, position, v3)
		Vector:add(v3, random_pos, v3)
		
		challenge:SpawnShip(ship_type, 1, v3, 0, "GW_A.luaAI", 2)
		challenge:WaitFor(delay)
	end
end

allAround = function()
	local spawnA = coroutine.create(spawnBunch)
	coroutine.resume(spawnA, "GW_A", 10, 0.04, Vector:new(500, 0), 400)
	local spawnB = coroutine.create(spawnBunch)
	coroutine.resume(spawnB, "GW_B", 10, 0.04, Vector:new(-500, 0), 400)
	while true do
		if coroutine.status(spawnA) ~= "dead" then
			coroutine.resume(spawnA)
		end
		if coroutine.status(spawnB) ~= "dead" then
			coroutine.resume(spawnB)
		end
		if coroutine.status(spawnA) == "dead" and coroutine.status(spawnB) == "dead" then 
			return
		else
			coroutine.yield()
		end
	end
	
end

enemySpawn = coroutine.wrap(function()
	challenge:WaitFor(1)

	circleOf("GW_A", 10, 1, 0.05, 400)
	challenge:WaitForAllEnemiesDead(0)

	--spawnBunch("GW_A", 1000, 0.04, Vector:new(500, 0), 500)
	allAround()
	challenge:WaitFor(3)

	spawnRandom("GW_A", 100, 500, 1000)
	challenge:WaitFor(3)
	spawnRandom("GW_B", 20, 500, 1000)
	challenge:WaitFor(6)
	spawnRandom("GW_C", 40, 500, 1000)
	challenge:WaitFor(6)
	spawnRandom("GW_A", 20, 500, 1000)
	challenge:WaitFor(0.5)
	spawnRandom("GW_B", 20, 500, 1000)
	challenge:WaitFor(0.5)
	spawnRandom("GW_C", 20, 500, 1000)
	challenge:WaitFor(9)
	spawnRandom("GW_A", 40, 500, 1000)
	challenge:WaitFor(0.5)
	spawnRandom("GW_B", 40, 500, 1000)
	challenge:WaitFor(0.5)
	spawnRandom("GW_C", 40, 500, 1000)
	challenge:WaitFor(9)
	
	circleOf("GW_B", 50, 1, 0, 500)
	challenge:WaitForAllEnemiesDead(0)
	challenge:WaitFor(1)

	circleOf("GW_A", 10, 1, 0.01, 400)
	challenge:WaitForAllEnemiesDead(0)
	challenge:WaitFor(1)

	circleOf("GW_C", 100, 4, 0.05, 500)
	challenge:WaitForAllEnemiesDead(0)
	challenge:WaitFor(1)	

	circleOf("GW_B", 50, 1, 0, 500)
	circleOf("GW_A", 50, 1, 0, 800)
	challenge:WaitForAllEnemiesDead(0)
	challenge:WaitFor(1)
	challenge:Victory()
end)

challenge:DisplayMessage("Geometry Wars knockoff", 2);
challenge:DisplayMessage("by Edward Woolhouse", 2);
challenge:WaitFor(1.5)
challenge:DisplayMessage("What a tiny but well armed ship.", 2);
challenge:WaitFor(0.5)
challenge:DisplayMessage("Incoming! Fend off the attackers!", 2);
challenge:WaitFor(1.0)
challenge:DisplayMessage("Get ready...", 2);
challenge:WaitFor(1.0)


while true do
	playerLives()
	enemySpawn()
	coroutine.yield()
end