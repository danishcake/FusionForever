--ReverseJuggernaut.luaChallenge
--This loads a lots of minor enemies for the player to swat.

require "Utility"

Challenge = {
	Script = coroutine.create(function()
		Predicate.WaitFor(2)
		
		for j = 0, 10 do
			LoadShip("SpikeyShip.luaShip")
			SetAI("SimpleAI")
			SetPosition(500 * math.sin(math.rad(360* j / 20)), 500 * math.cos(math.rad(360* j / 20)))
			ScaleHealth(0.5)
			AddToForce(1)
			
			LoadShip("SpikeyShip.luaShip")
			SetAI("SimpleAI")
			SetPosition(-500 * math.sin(math.rad(360* j / 20)), -500 * math.cos(math.rad(360* j / 20)))
			ScaleHealth(0.5)
			AddToForce(1)
			
			Predicate.WaitFor(0.1)
			Predicate.WaitTillEnemyCountLessThan(0, 6)
		end
		Predicate.WaitTillEnemiesDead(0)
	end),
	LivesScript = coroutine.create(function()
		LogError("Creating ownship as LuaShip")
		local ownship_id = LoadShip("JuggernautA.luaShip")
		SetAI("KeyboardAI")
		ScaleHealth(2)
		AddToForce(0)
		
		Predicate.WaitTillShipDead(ownship_id)
		Predicate.WaitFor(1)
		
		LogError("Respawning ownship as SpikeyShip")
		ownship_id = LoadShip("SpikeyShip.luaShip")
		SetAI("KeyboardAI")
		AddToForce(0)
		Predicate.WaitTillShipDead(ownship_id)		
	end),

	EntryPoint = function()
		local player_dead = false
		if coroutine.status(Challenge.LivesScript) ~= "dead" then
			local run_ok, error_message = coroutine.resume(Challenge.LivesScript)
			if run_ok ~= true then
				return error_message
			end
		else
			player_dead = true
		end
		
		if player_dead == true then
			return true
		end
		
		if coroutine.status(Challenge.Script) ~= "dead" then
			local run_ok, error_message = coroutine.resume(Challenge.Script)
			if run_ok then
				return false	--Script still executing
			else
				return error_message
			end
		else
			return true	--Script finished
		end
	end
}