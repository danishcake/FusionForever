

challenge:DisplayMessage("Dynamic Ship building", 2);
challenge:DisplayMessage("by Edward Woolhouse", 2);
challenge:WaitFor(1.5)
challenge:DisplayMessage("Demos the use of the ship builder", 2);
challenge:WaitFor(0.5)


function dump_sections()
	section_types = builder:getSectionTypes()
	print("Got " .. #section_types .. " section types")
	for index, section_type in ipairs(section_types) do
		metadata = builder:getSectionTypeMetadata(section_type)

		print("Got " .. #metadata.Tags .. " tags, " .. #metadata.Values .. " values and " .. #metadata.Coordinates .. " coordintes for " .. section_type)
		for k,v in ipairs(metadata.Tags) do
			print("Tag: " .. v)
		end
		
		for key, val in pairs(metadata.Values) do
			print("Value: " .. key .. ":" .. val)
		end
		
		for key, val in pairs(metadata.Coordinates) do
			print("Coordinate: " .. key .. ": (" .. val.x .. "," .. val.y .. ")")
		end
	end
end


cost = {}

function cost:new(section_type, cost)
	local o = {}
	o.section_type = section_type
	o.cost = cost
	return o
end





local arms = {cost:new("LongRigidArm", 10),
			  cost:new("RigidArm", 6),
			  cost:new("Spike", 3),
			  cost:new("Spire", 10),
			  cost:new("LargeSpire", 15),
			  cost:new("FlareArm", 18)}
local center_body = {cost:new("Clamp", 15),
					 cost:new("CenterFrontBody", 35),
					 cost:new("BearEars", 25),
					 cost:new("Circle", 15),
					 cost:new("LargeSquare", 15),
					 cost:new("OctoSection", 15)}
local asym_arms = {cost:new("Spike", 5),
				   cost:new("NarrowProngLH", 10),
				   cost:new("NarrowProngRH", 10),
				   cost:new("ProngLH", 10)}
local cores = {cost:new("SquareCore", 10),
			   cost:new("GiantCore", 20),
			   cost:new("TinyCore", 20)}
local all = {arms, center_body, asym_arms}

dump_sections()

for i = 1, 40 do
	local budget = 50 * i
	challenge:DisplayMessage("Budget = " .. budget, 2);
	local core_type = math.random(1, #cores)
	design = builder:createNew(cores[core_type].section_type)
	budget = budget - cores[core_type].cost
	local head = design
	local depth = 1
	while budget > 0 do
		local addition_type = math.random(1, #all)
		local addition_index = math.random(1, #(all[addition_type]))
		local newbit = builder:createNew(all[addition_type][addition_index].section_type)
		budget = budget - all[addition_type][addition_index].cost
		head:attachChild(newbit)
		newbit.angle = math.random(0, 360)
		newbit.position.x = math.random(-10, 10)
		newbit.position.y = math.random(-10, 10)
		if math.random(1, 6) == 1 or depth > 3 then
			depth = 1
			head = design
		else
			depth = depth + 1
			head = newbit
		end
	end
	
	x = ((i % 10) - 2) * 80
	y = (math.floor(i / 10) - 5) * 80
	ship_id = builder:spawnDesign(design, Vector:new(x, y), 0, i%8, 1)
	challenge:WaitFor(0.25)
	--challenge:KillShip(ship_id)
	
end

for i = 0, 7 do
	challenge:SpawnShip("TheMine", i, Vector:from_angle(i * 360 / 8) * 600, 0, "Ram.luaAI", 400)
end

challenge:WaitFor(20)

challenge:Victory()